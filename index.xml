<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Priydarshi Singh</title>
    <link>https://dryairship.github.io/</link>
    <description>Recent content on Priydarshi Singh</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Priydarshi Singh {year}</copyright>
    <lastBuildDate>Sat, 04 May 2019 12:30:23 +0530</lastBuildDate>
    
	    <atom:link href="https://dryairship.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How I Extracted Hidden Test Cases In Google FooBar</title>
      <link>https://dryairship.github.io/post/how-i-extracted-hidden-test-cases-in-google-foobar/</link>
      <pubDate>Sat, 04 May 2019 12:30:23 +0530</pubDate>
      
      <guid>https://dryairship.github.io/post/how-i-extracted-hidden-test-cases-in-google-foobar/</guid>
      <description>

&lt;p&gt;Hey there! In my &lt;a href=&#34;https://dryairship.github.io/post/my-google-foobar-experience/&#34; target=&#34;_blank&#34;&gt;previous post&lt;/a&gt; I wrote about my Google FooBar experience. I recommend you to read that post before you continue with this one.&lt;/p&gt;

&lt;p&gt;This post will explain how I managed to extract hidden test cases from Google FooBar. Note that I had reported the bug through the &lt;code&gt;feedback&lt;/code&gt; command via the &lt;em&gt;FooBar terminal&lt;/em&gt;. Although I did not receive any response from Google for that report, this flaw has now been fixed.&lt;/p&gt;

&lt;h2 id=&#34;a-mild-confusion&#34;&gt;A mild confusion&lt;/h2&gt;

&lt;p&gt;I discovered an important fact about FooBar&amp;rsquo;s test case evaluations when I was solving the 2&lt;sup&gt;nd&lt;/sup&gt; problem of the 2&lt;sup&gt;nd&lt;/sup&gt; level. Upon finally completing the code for the solution, I used the &lt;code&gt;verify&lt;/code&gt; command to check it. To my dismay, only the first test case passed. I went through my solution again to find any logical errors, but couldn&amp;rsquo;t find any. In my opinion, the program should have worked.&lt;/p&gt;

&lt;p&gt;I had already discovered that the first two test cases on which my solution was evaluated were the same as the ones given in the examples. And I had verified that my solution worked for the two example cases before I submitted the code. That was weird. At least the first two cases should have passed! Nevertheless, I decided to test the program on the example cases once again.&lt;/p&gt;

&lt;h2 id=&#34;bluej-3&#34;&gt;BlueJ &amp;lt;3&lt;/h2&gt;

&lt;p&gt;I think that fact that I used &lt;a href=&#34;https://www.bluej.org/&#34; target=&#34;_blank&#34;&gt;BlueJ&lt;/a&gt; (it&amp;rsquo;s an awesome Java IDE, BTW) was instrumental in helping me unravel the mystery. BlueJ has the option of calling static functions of a class through a popup menu obtained by right clicking the name of the class. This opens a dialog box that asks for the parameters to be passed to the function.
&lt;img src=&#34;bluej_call.png&#34; alt=&#34;BlueJ Method Call&#34; /&gt;
When the function completes its execution, another dialog box pops up which contains the return value of the function.
&lt;img src=&#34;bluej_return.png&#34; alt=&#34;BlueJ Method Return&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-same-mild-confusion-now-17-extra-for-free&#34;&gt;The same mild confusion, now 17% extra for free&lt;/h2&gt;

&lt;p&gt;So I recompiled the &lt;strong&gt;same&lt;/strong&gt; program (&lt;em&gt;not a very sane idea, I know, but wait&lt;/em&gt;) and called the &lt;code&gt;answer&lt;/code&gt; function directly from BlueJ&amp;rsquo;s fantastic UI, with the input being the first example test case (&lt;em&gt;yes, the one that was already giving me the correct answer on FooBar&amp;rsquo;s evaluation - not a very sane idea again, but wait&lt;/em&gt;).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I tell you, in this world, being a little crazy helps to keep you sane.  - Zsa Zsa Gabor&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I got &lt;code&gt;1&lt;/code&gt; as the output, which was the correct answer. Then, I again called the &lt;code&gt;answer&lt;/code&gt; function with the input being the second example test case. (&lt;em&gt;Note: No recompiling. I just closed the output window of the first example, and called the function again.&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Boom!&lt;/strong&gt; This time, I got &lt;code&gt;7&lt;/code&gt; as the output. The correct answer was supposed to be &lt;code&gt;6&lt;/code&gt;. That was funny. I remember I got &lt;code&gt;6&lt;/code&gt; as the output the last time I passed the &lt;em&gt;same&lt;/em&gt; parameters to the &lt;em&gt;same&lt;/em&gt; code. Just to confirm it, I recompiled the code, called the function with the second example case, and found the output to be &lt;code&gt;6&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;puzzle-solved&#34;&gt;Puzzle solved!&lt;/h2&gt;

&lt;p&gt;At this moment, I knew that my code was correct. It was Java that was acting weirdly, or so I tended to believe. I was almost ready to post this as a question on StackOverflow, when I decided to look at my code again.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;And here comes the big moment&lt;/em&gt;. I realized that the value that the &lt;code&gt;answer&lt;/code&gt; function was supposed to return, was stored in a &lt;code&gt;static&lt;/code&gt; variable. (&lt;em&gt;Don&amp;rsquo;t judge me. I have now learnt that it is a bad practice.&lt;/em&gt;) Thus, the variable was conserved across multiple calls of the &lt;code&gt;answer&lt;/code&gt; function on the same instance of the Java Virtual Machine. And I had never explicitly set the variable to 0. I just kept on increasing the value of the variable (in another static function - which did the calculations), and returned it when the calculations were over. Thus, when I called the function the second time, the variable still contained its previous value. Hence, I got &lt;code&gt;7&lt;/code&gt; = &lt;code&gt;1&lt;/code&gt;+&lt;code&gt;6&lt;/code&gt; as my answer for the second test case.&lt;/p&gt;

&lt;p&gt;Recompiling a program in BlueJ resets the Java Virtual Machine. Hence, the static variables are restored to their initial values. This is why I got the correct answer when I ran the program after recompiling it.&lt;/p&gt;

&lt;p&gt;Of course, I solved the issue by simply putting a statement to reset the variable to 0 before performing the calculations. With this modification, my program passed all the test cases.&lt;/p&gt;

&lt;p&gt;The important fact that I learnt here is that Google was calling the &lt;code&gt;answer&lt;/code&gt; function on the same instance of JVM for all the test cases.&lt;br /&gt;
&lt;center&gt;
&lt;em&gt;So is this a flaw?&lt;/em&gt;&lt;br /&gt;
&lt;strong&gt;Yes!&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;Can we exploit it?&lt;/em&gt;&lt;br /&gt;
&lt;strong&gt;It wouldn&amp;rsquo;t be a flaw if we couldn&amp;rsquo;t exploit it!&lt;/strong&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;lost-in-a-maze&#34;&gt;Lost in a maze&lt;/h2&gt;

&lt;p&gt;For the 2&lt;sup&gt;nd&lt;/sup&gt; problem of level 3, I had to find the length of the shortest path from the bottom-right corner to the top-left corner of a boolean matrix. &lt;code&gt;false&lt;/code&gt; represented a block where we could move, and &lt;code&gt;true&lt;/code&gt; represented a piece of wall. Also, I was allowed to remove at most one wall from the maze.&lt;/p&gt;

&lt;p&gt;I didn&amp;rsquo;t know about BFS/DFS back then. &lt;em&gt;(I didn&amp;rsquo;t know about any standard algorithms, in fact. :&amp;lsquo;( )&lt;/em&gt;  As a result, I coded up a very &lt;em&gt;dirty&lt;/em&gt; solution (must&amp;rsquo;ve been DFS, only I didn&amp;rsquo;t know it was called so). And it worked. Well, &lt;strong&gt;almost&lt;/strong&gt;! It passed &lt;sup&gt;4&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt; test cases.
&lt;img src=&#34;test4.png&#34; alt=&#34;Test Case 4&#34; /&gt;
I tried hard to find a bug or an edge case that I hadn&amp;rsquo;t considered, but I couldn&amp;rsquo;t. So I decided to find an altogether different approach to solve the problem. While thinking of a better solution to the problem, an evil idea struck me.&lt;/p&gt;

&lt;h2 id=&#34;i-want-to-hack-nasa-sup-google-sup-with-html-sup-binary-code-sup&#34;&gt;I want to hack &lt;del&gt;NASA&lt;/del&gt; &lt;sup&gt;Google&lt;/sup&gt; with &lt;del&gt;HTML&lt;/del&gt; &lt;sup&gt;Binary Code&lt;/sup&gt;&lt;/h2&gt;

&lt;p&gt;The fact that the JVM was the same across evaluations implied that I could share data among different runs of the program. So I did two things :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a static variable named &lt;code&gt;testCase&lt;/code&gt; that is incremented every time the &lt;code&gt;answer&lt;/code&gt; function is called. This will contain the number the test case that is being currently evaluated.&lt;/li&gt;
&lt;li&gt;Store the data of the current test case into other static variables. This could be :

&lt;ul&gt;
&lt;li&gt;a single variable - in which case the data of one test case will be available only to the next test case, or&lt;/li&gt;
&lt;li&gt;an array - in which case the data of one test case will be available to all subsequent test cases.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Okay, so now I have the data of the previous test case stored in a static variable.
&lt;center&gt;&lt;em&gt;How do I use it?&lt;/em&gt;&lt;br /&gt;
&lt;strong&gt;By failing on purpose!&lt;/strong&gt;&lt;/center&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to succeed, double your failure rate. - Thomas Watson&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;idea&#34;&gt;Idea&lt;/h3&gt;

&lt;p&gt;Convert the data of the previous test case into binary form. If the number at the &lt;code&gt;i&lt;/code&gt;th position is &lt;code&gt;1&lt;/code&gt;, run the program as it is supposed to. If it is &lt;code&gt;0&lt;/code&gt;, return a garbage value so that the current test case fails.&lt;/p&gt;

&lt;h3 id=&#34;implementation&#34;&gt;Implementation&lt;/h3&gt;

&lt;p&gt;I stored the matrix of the 4&lt;sup&gt;th&lt;/sup&gt; test case in a static variable. When inside the 5&lt;sup&gt;th&lt;/sup&gt; test case evaluation, I used the above mentioned idea to return the correct/incorrect output.&lt;/p&gt;

&lt;p&gt;I first converted the length of the matrix to a binary string and checked for the character at index &lt;code&gt;i&lt;/code&gt; (I had to manually increment the value of &lt;code&gt;i&lt;/code&gt; after every submission). If this bit was &lt;code&gt;0&lt;/code&gt;, I returned &lt;code&gt;-1&lt;/code&gt;, otherwise I let the program run as it was supposed to. On observing the results, if only the 4&lt;sup&gt;th&lt;/sup&gt; test case failed, the inference drawn was that the bit at &lt;code&gt;i&lt;/code&gt;th index was 1. If both the 4&lt;sup&gt;th&lt;/sup&gt; and the 5&lt;sup&gt;th&lt;/sup&gt; test cases failed, the inference drawn was that the bit at &lt;code&gt;i&lt;/code&gt;th index was 0. When the index grew bigger than the length of the binary string, a Runtime Error was thrown instead of a Wrong Answer. This way, I found the binary representation of the length of the matrix.&lt;/p&gt;

&lt;p&gt;I repeated the process for the breadth, and then for the entire matrix (&lt;em&gt;except, I didn&amp;rsquo;t&amp;hellip;&lt;/em&gt;).&lt;/p&gt;

&lt;h2 id=&#34;a-far-more-unheroic-but-faster-way&#34;&gt;A far more unheroic, but faster way&lt;/h2&gt;

&lt;p&gt;I had found out almost half the matrix when I realized that instead of obtaining the entire matrix, I could just guess the answer. Since I had to find the length of shortest path, the answer would satisfy:
&lt;center&gt;
&lt;code&gt;length+breadth-1 &amp;lt;= answer &amp;lt; length*breadth&lt;/code&gt;&lt;br /&gt;
(much less than &lt;code&gt;length*breadth&lt;/code&gt; actually)
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;So for all the test cases, I would let the program run normally, while for the 4&lt;sup&gt;th&lt;/sup&gt; test case, I would return a custom value. I started with &lt;code&gt;length+breadth-1&lt;/code&gt;, and kept incrementing it until the 4&lt;sup&gt;th&lt;/sup&gt; test case passed too. (&lt;em&gt;Okay fine, a very despicable way to pass a test case, indeed. This is probably why I didn&amp;rsquo;t whine when I didn&amp;rsquo;t hear from Google - I hadn&amp;rsquo;t completely solved this problem.&lt;/em&gt;)&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The binary conversion method, although a long procedure, could be successfully used to extract hidden test cases from Google FooBar - much more easily for problems which have a few &lt;code&gt;int&lt;/code&gt; values as the input. &lt;strong&gt;However, it requires that at least one test case succeeding the failing test case, must pass&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Although finding hidden test cases isn&amp;rsquo;t that much of a benefit (as it&amp;rsquo;ll only help if the program fails for some edge cases), they are &amp;ldquo;hidden&amp;rdquo; for a reason, and it would be better if they remain so! I&amp;rsquo;m glad that Google has now fixed the issue.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My Google FooBar Experience</title>
      <link>https://dryairship.github.io/post/my-google-foobar-experience/</link>
      <pubDate>Fri, 03 May 2019 23:00:48 +0530</pubDate>
      
      <guid>https://dryairship.github.io/post/my-google-foobar-experience/</guid>
      <description>

&lt;p&gt;Hey all! This blog post is about &lt;a href=&#34;https://foobar.withgoogle.com/&#34; target=&#34;_blank&#34;&gt;Google FooBar&lt;/a&gt;, how I got invited to it, the problems, and what happened at the end.&lt;/p&gt;

&lt;h2 id=&#34;invitation&#34;&gt;Invitation&lt;/h2&gt;

&lt;p&gt;Legend has it that Google FooBar is Google’s &lt;em&gt;&amp;ldquo;secret hiring challenge&amp;rdquo;&lt;/em&gt;. You can take part in it only if you have an invitation and you if you perform well enough you may be hired! I am aware of two ways one can get an invitation :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Google Search -&lt;/strong&gt; Apparently, making enough programming related searches on Google can get you an invitation (as was the case with me). I have no idea regarding the algorithm which decides if you have made &lt;em&gt;enough&lt;/em&gt; searches. I have been searching for solutions to programming problems since 2012 (okay, those searches must have been quite silly), and it was only in January 2017 that I got the invitation.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Referral -&lt;/strong&gt; People who have completed some challenges on FooBar get a URL which they can share with their friends to invite them to participate. Again, I don&amp;rsquo;t know how many challenges one needs to solve to get the referral link. I got mine when FooBar resumed after being down for extended maintenance for about a year.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;interface&#34;&gt;Interface&lt;/h2&gt;

&lt;p&gt;After logging in, one is greeted with a linux-terminal like screen. &lt;code&gt;help&lt;/code&gt; lists out the various commands that work in this terminal.
&lt;img src=&#34;commands.png&#34; alt=&#34;Google FooBar Commands&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;request&lt;/code&gt; creates a new directory which contains the problem statement and the solution templates. The solutions can be in either &lt;strong&gt;Java&lt;/strong&gt; or &lt;strong&gt;python&lt;/strong&gt;. One can only have a single active challenge at a time.&lt;/p&gt;

&lt;p&gt;At the time I was invited for the challenge, Java was, sort-of, &lt;a href=&#34;https://stackoverflow.com/search?tab=votes&amp;amp;q=user%3a4121347%20%5bjava%5d&#34; target=&#34;_blank&#34;&gt;my mother tongue&lt;/a&gt; :p. So I submitted my solutions in Java. The Java template for each problem had a function like this, which we were supposed to complete :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;public static int answer(&amp;lt;params&amp;gt;) {
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;problems&#34;&gt;Problems&lt;/h2&gt;

&lt;p&gt;The problems were like regular &lt;a href=&#34;https://en.wikipedia.org/wiki/Competitive_programming&#34; target=&#34;_blank&#34;&gt;CP&lt;/a&gt; problems. Most of them were solvable by using &lt;strong&gt;dynamic programming&lt;/strong&gt;. However, at that time, I was a novice at CP and completely inexperienced at dynamic programming, and hence solving every problem was a matter of extreme pride and happiness for me.&lt;/p&gt;

&lt;p&gt;The problems were divided into 5 levels :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Level 1 had 1 problem.&lt;/li&gt;
&lt;li&gt;Level 2 had 2 problems.&lt;/li&gt;
&lt;li&gt;Level 3 had 3 problems.&lt;/li&gt;
&lt;li&gt;Level 4 again had 2 problems.&lt;/li&gt;
&lt;li&gt;Level 5 supposedly had only 1 problem.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I was able to sail through the first four levels easily (except problem 2 of level 3 - explained in &lt;a href=&#34;https://dryairship.github.io/post/how-i-extracted-hidden-test-cases-in-google-foobar/&#34; target=&#34;_blank&#34;&gt;this blog post&lt;/a&gt;), but I couldn&amp;rsquo;t complete the challenge as I failed to solve the only problem of the 5&lt;sup&gt;th&lt;/sup&gt; level.&lt;/p&gt;

&lt;p&gt;I had 25 days to solve the last problem, and I spent the first 10 days without much worry - I was doltishly expecting this one to be of the same difficulty level as the previous ones, which were surprisingly quite simple. As it turned out, I was very wrong. I came up with a few different ways to solve the problem, but all my solutions were essentially brute-force (with a time complexity  of O(2&lt;sup&gt;mn&lt;/sup&gt;)) and were naturally taking a lot of time.&lt;/p&gt;

&lt;p&gt;When I lost all hopes of solving the problem on my own, I posted the &lt;a href=&#34;https://stackoverflow.com/q/41923054/4121347&#34; target=&#34;_blank&#34;&gt;question on StackOverflow&lt;/a&gt;, and even put a bounty on it! However, I failed to get an answer (the question has no accepted answer even today, because apparently the problem was a &lt;a href=&#34;https://en.wikipedia.org/wiki/Cellular_automaton&#34; target=&#34;_blank&#34;&gt;Cellular Automation&lt;/a&gt; problem, and my naive approach was very different from the expected solution).&lt;/p&gt;

&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;status&lt;/code&gt; commands prints the progress of a user. For me, the output is like this :
&lt;img src=&#34;status.png&#34; alt=&#34;Google FooBar Status&#34; /&gt;
When I cleared the third level, Google gave me an option to use the &lt;code&gt;recruitme&lt;/code&gt; command, which supposedly shared my progress with a Google recruiter. I decided to use it at the end of the challenge. Later, since I couldn&amp;rsquo;t solve the last problem, I didn&amp;rsquo;t really expect anyone from Google to contact me. Still, hoping for the best, I used the command, and entered the information it asked - like name, contact details, education etc.&lt;/p&gt;

&lt;p&gt;Unfortunately, I haven&amp;rsquo;t heard from any Google recruiter. Perhaps because I was still in school then - they asked this when I entered the details. Or maybe because I cheated on the 2&lt;sup&gt;nd&lt;/sup&gt; problem of the 3&lt;sup&gt;rd&lt;/sup&gt; level (read &lt;a href=&#34;https://dryairship.github.io/post/how-i-extracted-hidden-test-cases-in-google-foobar/&#34; target=&#34;_blank&#34;&gt;this blog post&lt;/a&gt; for details). Or perhaps because I couldn&amp;rsquo;t solve the last problem. Or maybe because Google stopped hiring through FooBar.&lt;/p&gt;

&lt;p&gt;Whatever the reason may be, I wasn&amp;rsquo;t really disappointed. Solving those problems gave me immense confidence and the inspiration to perform better at the next opportunity I get. And of course, the invitation for Google FooBar is in itself a procurement to cherish!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Meow, World!</title>
      <link>https://dryairship.github.io/post/meow-world/</link>
      <pubDate>Fri, 26 Apr 2019 23:33:17 +0530</pubDate>
      
      <guid>https://dryairship.github.io/post/meow-world/</guid>
      <description>&lt;p&gt;Hey there, everyone! I am Priydarshi and this is my blog. Here I would be posting primarily programming related stuff, in addition to my experiences at IITK and in general life.&lt;/p&gt;

&lt;p&gt;What was the motivation for me to start this blog?&lt;br /&gt;
1. Almost all of the cool seniors I know have their own blogs.&lt;br /&gt;
2. I believe I have stories to tell, and knowledge to share.&lt;br /&gt;
3. I wanted to tick off another item from my bucket list.&lt;/p&gt;

&lt;p&gt;The final examinations for the second semester ended yesterday and so now I finally have the time to try my hand at maintaining a blog.&lt;/p&gt;

&lt;p&gt;Currently this blog is hosted on GitHub Pages (&lt;em&gt;though I might later shift it to a personal domain&lt;/em&gt;). I am using the &lt;a href=&#34;https://themes.gohugo.io/academic/&#34; target=&#34;_blank&#34;&gt;Academic&lt;/a&gt; theme and the &lt;a href=&#34;https://gohugo.io/&#34; target=&#34;_blank&#34;&gt;Hugo&lt;/a&gt; framework for maintaining this blog.&lt;/p&gt;

&lt;p&gt;Although Hugo claims to be user-friendly, my experience with setting up this blog wasn&amp;rsquo;t as smooth as I expected it to be. So I find &lt;code&gt;apt&lt;/code&gt; to be easiest way to install any package. But apparently, &lt;code&gt;sudo apt install hugo&lt;/code&gt; installs an older version of Hugo, and on trying to build this site with that version, I ended up with an error message telling me that the Academic theme isn&amp;rsquo;t compatible with my current Hugo version.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Current theme does not support Hugo version 0.40.1. Minimum version required is 0.54
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So I purged the &lt;code&gt;apt&lt;/code&gt; version. What, then, is the next easiest way to install a package? &lt;code&gt;snap&lt;/code&gt;! So I did &lt;code&gt;sudo snap install hugo&lt;/code&gt;. Trying to build the site with this gave me another scary error message :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;failed to transform resource: TOCSS: failed to transform &amp;quot;scss/main.scss&amp;quot; (text/x-scss): this feature is not available in your current Hugo version, see https://goo.gl/YMrWcn for more information.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For some unknown reason, I chose to ignore the link in the error message and decided to Google the error. I found the same error on StackOverflow (&lt;em&gt;The real happiness? +_+&lt;/em&gt;) and the accepted answer recommended me to install the tarball version of Hugo. So I did that, but ended up with the same error message. (&lt;em&gt;What can be more sad than an accepted SO answer not helping you out?&lt;/em&gt; ;_; )&lt;/p&gt;

&lt;p&gt;Finally I decided to follow the link in the error message, and found a very easy &lt;a href=&#34;https://gohugo.io/troubleshooting/faq/#i-get-tocss-this-feature-is-not-available-in-your-current-hugo-version&#34; target=&#34;_blank&#34;&gt;solution&lt;/a&gt; to this error - apparently I had installed the normal version, whereas I needed the &lt;code&gt;extended&lt;/code&gt; version. (&lt;em&gt;*facepalm*&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Lesson learnt : &lt;strong&gt;An error message doesn&amp;rsquo;t always come with a link to its solution. So when it does, follow the link blindly.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That was my first blog post. Hope you stick around to read my future posts!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Online Election Manager</title>
      <link>https://dryairship.github.io/project/online-election-manager/</link>
      <pubDate>Sun, 14 Apr 2019 19:32:10 +0530</pubDate>
      
      <guid>https://dryairship.github.io/project/online-election-manager/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
