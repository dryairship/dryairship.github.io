[{"authors":["dryairship"],"categories":null,"content":"I am a first year undergraduate student at the Indian Institute Of Technology, Kanpur, majoring in Aerospace Engineering. My academic interests include cyber security and artificial intelligence. I am a learning developer.\nFor recreation purposes I prefer mind sports like chess, competitive programming or puzzling. I am also an avid quizzer, a swimmer and a budding water-polo player.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"83d2e2fa5c499a312575bd89ef9beb7a","permalink":"https://dryairship.github.io/authors/dryairship/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/dryairship/","section":"author","summary":"I am a first year undergraduate student at the Indian Institute Of Technology, Kanpur, majoring in Aerospace Engineering. My academic interests include cyber security and artificial intelligence. I am a learning developer.\nFor recreation purposes I prefer mind sports like chess, competitive programming or puzzling. I am also an avid quizzer, a swimmer and a budding water-polo player.","tags":null,"title":"Priydarshi Singh","type":"author"},{"authors":["Priydarshi Singh"],"categories":[],"content":" Hey there! In my previous post I wrote about my Google FooBar experience. I recommend you to read that post before you continue with this one.\nThis post will explain how I managed to extract hidden test cases from Google FooBar. Note that I had reported the bug through the feedback command via the FooBar terminal. Although I did not receive any response from Google for that report, this flaw has now been fixed.\nA mild confusion I discovered an important fact about FooBar\u0026rsquo;s test case evaluations when I was solving the 2nd problem of the 2nd level. Upon finally completing the code for the solution, I used the verify command to check it. To my dismay, only the first test case passed. I went through my solution again to find any logical errors, but couldn\u0026rsquo;t find any. In my opinion, the program should have worked.\nI had already discovered that the first two test cases on which my solution was evaluated were the same as the ones given in the examples. And I had verified that my solution worked for the two example cases before I submitted the code. That was weird. At least the first two cases should have passed! Nevertheless, I decided to test the program on the example cases once again.\nBlueJ \u0026lt;3 I think that fact that I used BlueJ (it\u0026rsquo;s an awesome Java IDE, BTW) was instrumental in helping me unravel the mystery. BlueJ has the option of calling static functions of a class through a popup menu obtained by right clicking the name of the class. This opens a dialog box that asks for the parameters to be passed to the function. When the function completes its execution, another dialog box pops up which contains the return value of the function. The same mild confusion, now 17% extra for free So I recompiled the same program (not a very sane idea, I know, but wait) and called the answer function directly from BlueJ\u0026rsquo;s fantastic UI, with the input being the first example test case (yes, the one that was already giving me the correct answer on FooBar\u0026rsquo;s evaluation - not a very sane idea again, but wait).\n I tell you, in this world, being a little crazy helps to keep you sane. - Zsa Zsa Gabor\n I got 1 as the output, which was the correct answer. Then, I again called the answer function with the input being the second example test case. (Note: No recompiling. I just closed the output window of the first example, and called the function again.)\nBoom! This time, I got 7 as the output. The correct answer was supposed to be 6. That was funny. I remember I got 6 as the output the last time I passed the same parameters to the same code. Just to confirm it, I recompiled the code, called the function with the second example case, and found the output to be 6.\nPuzzle solved! At this moment, I knew that my code was correct. It was Java that was acting weirdly, or so I tended to believe. I was almost ready to post this as a question on StackOverflow, when I decided to look at my code again.\nAnd here comes the big moment. I realized that the value that the answer function was supposed to return, was stored in a static variable. (Don\u0026rsquo;t judge me. I have now learnt that it is a bad practice.) Thus, the variable was conserved across multiple calls of the answer function on the same instance of the Java Virtual Machine. And I had never explicitly set the variable to 0. I just kept on increasing the value of the variable (in another static function - which did the calculations), and returned it when the calculations were over. Thus, when I called the function the second time, the variable still contained its previous value. Hence, I got 7 = 1+6 as my answer for the second test case.\nRecompiling a program in BlueJ resets the Java Virtual Machine. Hence, the static variables are restored to their initial values. This is why I got the correct answer when I ran the program after recompiling it.\nOf course, I solved the issue by simply putting a statement to reset the variable to 0 before performing the calculations. With this modification, my program passed all the test cases.\nThe important fact that I learnt here is that Google was calling the answer function on the same instance of JVM for all the test cases.\n So is this a flaw?\nYes!\nCan we exploit it?\nIt wouldn\u0026rsquo;t be a flaw if we couldn\u0026rsquo;t exploit it! \nLost in a maze For the 2nd problem of level 3, I had to find the length of the shortest path from the bottom-right corner to the top-left corner of a boolean matrix. false represented a block where we could move, and true represented a piece of wall. Also, I was allowed to remove at most one wall from the maze.\nI didn\u0026rsquo;t know about BFS/DFS back then. (I didn\u0026rsquo;t know about any standard algorithms, in fact. :\u0026lsquo;( ) As a result, I coded up a very dirty solution (must\u0026rsquo;ve been DFS, only I didn\u0026rsquo;t know it was called so). And it worked. Well, almost! It passed 4\u0026frasl;5 test cases. I tried hard to find a bug or an edge case that I hadn\u0026rsquo;t considered, but I couldn\u0026rsquo;t. So I decided to find an altogether different approach to solve the problem. While thinking of a better solution to the problem, an evil idea struck me.\nI want to hack NASA Google with HTML Binary Code The fact that the JVM was the same across evaluations implied that I could share data among different runs of the program. So I did two things :\n Create a static variable named testCase that is incremented every time the answer function is called. This will contain the number the test case that is being currently evaluated. Store the data of the current test case into other static variables. This could be :  a single variable - in which case the data of one test case will be available only to the next test case, or an array - in which case the data of one test case will be available to all subsequent test cases.   Okay, so now I have the data of the previous test case stored in a static variable. How do I use it?\nBy failing on purpose!\n If you want to succeed, double your failure rate. - Thomas Watson\n Idea Convert the data of the previous test case into binary form. If the number at the ith position is 1, run the program as it is supposed to. If it is 0, return a garbage value so that the current test case fails.\nImplementation I stored the matrix of the 4th test case in a static variable. When inside the 5th test case evaluation, I used the above mentioned idea to return the correct/incorrect output.\nI first converted the length of the matrix to a binary string and checked for the character at index i (I had to manually increment the value of i after every submission). If this bit was 0, I returned -1, otherwise I let the program run as it was supposed to. On observing the results, if only the 4th test case failed, the inference drawn was that the bit at ith index was 1. If both the 4th and the 5th test cases failed, the inference drawn was that the bit at ith index was 0. When the index grew bigger than the length of the binary string, a Runtime Error was thrown instead of a Wrong Answer. This way, I found the binary representation of the length of the matrix.\nI repeated the process for the breadth, and then for the entire matrix (except, I didn\u0026rsquo;t\u0026hellip;).\nA far more unheroic, but faster way I had found out almost half the matrix when I realized that instead of obtaining the entire matrix, I could just guess the answer. Since I had to find the length of shortest path, the answer would satisfy:  length+breadth-1 \u0026lt;= answer \u0026lt; length*breadth\n(much less than length*breadth actually) \nSo for all the test cases, I would let the program run normally, while for the 4th test case, I would return a custom value. I started with length+breadth-1, and kept incrementing it until the 4th test case passed too. (Okay fine, a very despicable way to pass a test case, indeed. This is probably why I didn\u0026rsquo;t whine when I didn\u0026rsquo;t hear from Google - I hadn\u0026rsquo;t completely solved this problem.)\nConclusion The binary conversion method, although a long procedure, could be successfully used to extract hidden test cases from Google FooBar - much more easily for problems which have a few int values as the input. However, it requires that at least one test case succeeding the failing test case, must pass.\nAlthough finding hidden test cases isn\u0026rsquo;t that much of a benefit (as it\u0026rsquo;ll only help if the program fails for some edge cases), they are \u0026ldquo;hidden\u0026rdquo; for a reason, and it would be better if they remain so! I\u0026rsquo;m glad that Google has now fixed the issue.\n","date":1556953223,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556953223,"objectID":"2967603faf8987e1252106b74843e9ce","permalink":"https://dryairship.github.io/post/how-i-extracted-hidden-test-cases-in-google-foobar/","publishdate":"2019-05-04T12:30:23+05:30","relpermalink":"/post/how-i-extracted-hidden-test-cases-in-google-foobar/","section":"post","summary":"Description of a now patched flaw that allowed extraction of hidden test cases in Google FooBar","tags":["google","foobar","hacking","java"],"title":"How I Extracted Hidden Test Cases In Google FooBar","type":"post"},{"authors":["Priydarshi Singh"],"categories":[],"content":" Hey all! This blog post is about Google FooBar, how I got invited to it, the problems, and what happened at the end.\nInvitation Legend has it that Google FooBar is Google’s \u0026ldquo;secret hiring challenge\u0026rdquo;. You can take part in it only if you have an invitation and you if you perform well enough you may be hired! I am aware of two ways one can get an invitation :\n Google Search - Apparently, making enough programming related searches on Google can get you an invitation (as was the case with me). I have no idea regarding the algorithm which decides if you have made enough searches. I have been searching for solutions to programming problems since 2012 (okay, those searches must have been quite silly), and it was only in January 2017 that I got the invitation.\n Referral - People who have completed some challenges on FooBar get a URL which they can share with their friends to invite them to participate. Again, I don\u0026rsquo;t know how many challenges one needs to solve to get the referral link. I got mine when FooBar resumed after being down for extended maintenance for about a year.  Interface After logging in, one is greeted with a linux-terminal like screen. help lists out the various commands that work in this terminal. A request creates a new directory which contains the problem statement and the solution templates. The solutions can be in either Java or python. One can only have a single active challenge at a time.\nAt the time I was invited for the challenge, Java was, sort-of, my mother tongue :p. So I submitted my solutions in Java. The Java template for each problem had a function like this, which we were supposed to complete :\npublic static int answer(\u0026lt;params\u0026gt;) { ... }  Problems The problems were like regular CP problems. Most of them were solvable by using dynamic programming. However, at that time, I was a novice at CP and completely inexperienced at dynamic programming, and hence solving every problem was a matter of extreme pride and happiness for me.\nThe problems were divided into 5 levels :\n Level 1 had 1 problem. Level 2 had 2 problems. Level 3 had 3 problems. Level 4 again had 2 problems. Level 5 supposedly had only 1 problem.  I was able to sail through the first four levels easily (except problem 2 of level 3 - to be explained in a later blog post), but I couldn\u0026rsquo;t complete the challenge as I failed to solve the only problem of the 5th level.\nI had 25 days to solve the last problem, and I spent the first 10 days without much worry - I was doltishly expecting this one to be of the same difficulty level as the previous ones, which were surprisingly quite simple. As it turned out, I was very wrong. I came up with a few different ways to solve the problem, but all my solutions were essentially brute-force (with a time complexity of O(2mn)) and were naturally taking a lot of time.\nWhen I lost all hopes of solving the problem on my own, I posted the question on StackOverflow, and even put a bounty on it! However, I failed to get an answer (the question has no accepted answer even today, because apparently the problem was a Cellular Automation problem, and my naive approach was very different from the expected solution).\nResults The status commands prints the progress of a user. For me, the output is like this : When I cleared the third level, Google gave me an option to use the recruitme command, which supposedly shared my progress with a Google recruiter. I decided to use it at the end of the challenge. Later, since I couldn\u0026rsquo;t solve the last problem, I didn\u0026rsquo;t really expect anyone from Google to contact me. Still, hoping for the best, I used the command, and entered the information it asked - like name, contact details, education etc.\nUnfortunately, I haven\u0026rsquo;t heard from any Google recruiter. Perhaps because I was still in school then - they asked this when I entered the details. Or maybe because I cheated on the 2nd problem of the 3rd level (read the next blog post for details). Or perhaps because I couldn\u0026rsquo;t solve the last problem. Or maybe because Google stopped hiring through FooBar.\nWhatever the reason may be, I wasn\u0026rsquo;t really disappointed. Solving those problems gave me immense confidence and the inspiration to perform better at the next opportunity I get. And of course, the invitation for Google FooBar is in itself a procurement to cherish!\n","date":1556904648,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556904648,"objectID":"104dffd5b245823d02291e8a15aab398","permalink":"https://dryairship.github.io/post/my-google-foobar-experience/","publishdate":"2019-05-03T23:00:48+05:30","relpermalink":"/post/my-google-foobar-experience/","section":"post","summary":"About Google FooBar, the invitation, the problems and the results.","tags":["google","foobar","competitive-programming"],"title":"My Google FooBar Experience","type":"post"},{"authors":["Priydarshi Singh"],"categories":[],"content":"Hey there, everyone! I am Priydarshi and this is my blog. Here I would be posting primarily programming related stuff, in addition to my experiences at IITK and in general life.\nWhat was the motivation for me to start this blog?\n1. Almost all of the cool seniors I know have their own blogs.\n2. I believe I have stories to tell, and knowledge to share.\n3. I wanted to tick off another item from my bucket list.\nThe final examinations for the second semester ended yesterday and so now I finally have the time to try my hand at maintaining a blog.\nCurrently this blog is hosted on GitHub Pages (though I might later shift it to a personal domain). I am using the Academic theme and the Hugo framework for maintaining this blog.\nAlthough Hugo claims to be user-friendly, my experience with setting up this blog wasn\u0026rsquo;t as smooth as I expected it to be. So I find apt to be easiest way to install any package. But apparently, sudo apt install hugo installs an older version of Hugo, and on trying to build this site with that version, I ended up with an error message telling me that the Academic theme isn\u0026rsquo;t compatible with my current Hugo version.\nCurrent theme does not support Hugo version 0.40.1. Minimum version required is 0.54  So I purged the apt version. What, then, is the next easiest way to install a package? snap! So I did sudo snap install hugo. Trying to build the site with this gave me another scary error message :\nfailed to transform resource: TOCSS: failed to transform \u0026quot;scss/main.scss\u0026quot; (text/x-scss): this feature is not available in your current Hugo version, see https://goo.gl/YMrWcn for more information.  For some unknown reason, I chose to ignore the link in the error message and decided to Google the error. I found the same error on StackOverflow (The real happiness? +_+) and the accepted answer recommended me to install the tarball version of Hugo. So I did that, but ended up with the same error message. (What can be more sad than an accepted SO answer not helping you out? ;_; )\nFinally I decided to follow the link in the error message, and found a very easy solution to this error - apparently I had installed the normal version, whereas I needed the extended version. (*facepalm*)\nLesson learnt : An error message doesn\u0026rsquo;t always come with a link to its solution. So when it does, follow the link blindly.\nThat was my first blog post. Hope you stick around to read my future posts!\n","date":1556301797,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556301797,"objectID":"1e4c033fc3962373c86c99bf825517d5","permalink":"https://dryairship.github.io/post/meow-world/","publishdate":"2019-04-26T23:33:17+05:30","relpermalink":"/post/meow-world/","section":"post","summary":"My first attempt at writing a blog post.","tags":["hugo"],"title":"Meow, World!","type":"post"},{"authors":null,"categories":null,"content":"","date":1555250530,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555250530,"objectID":"345dfa4a5e2445eb85f77d5ac3cf180a","permalink":"https://dryairship.github.io/project/online-election-manager/","publishdate":"2019-04-14T19:32:10+05:30","relpermalink":"/project/online-election-manager/","section":"project","summary":"A cryptographically secure web portal to manage online elections.","tags":["cryptography","golang","development","security"],"title":"Online Election Manager","type":"project"}]